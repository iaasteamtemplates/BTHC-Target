{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Target machines BTH",
   "Parameters": {
    "AMI": {
      "Description": "Autodetect selects the correct AMI based on the region. Otherwise, specify an AMI ID.",
      "Type": "String",
      "Default": "autodetect"
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "ID of the VPC to launch your deployment in."
    },
    "PrivateSubnetId": {
      "Description": "Subnet ID for LAN network.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "TrustedNetworkCIDR": {
      "Description": "Allow all traffic from this CIDR to the target machine on TCP ports 80 and 443.",
      "Type": "String",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    },
    "InstanceSize": {
      "Description": "The default EC2 instance type is t2.large.",
      "Type": "String",
      "Default": "t2.large"
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-northeast-1": {
	    "AMIID": "ami-0f310fced6141e627"
	  },
      "ap-northeast-2": {
	    "AMIID": "ami-01288945bd24ed49a"
	  },
      "ap-south-1": {
	    "AMIID": "ami-0470e33cd681b2476"
	  },
      "ap-southeast-1": {
	    "AMIID": "ami-0ec225b5e01ccb706"
	  },
      "ap-southeast-2": {
	    "AMIID": "ami-0970010f37c4f9c8d"
	  },
      "ca-central-1": {
	    "AMIID": "ami-054362537f5132ce2"
	  },
      "eu-central-1": {
	    "AMIID": "ami-076431be05aaf8080"
	  },
      "eu-north-1": {
	    "AMIID": "ami-0b7a46b4bd694e8a6"
	  },
      "eu-west-1": {
	    "AMIID": "ami-06ce3edf0cff21f07"
	  },
      "eu-west-2": {
	    "AMIID": "ami-01a6e31ac994bbc09"
	  },
      "eu-west-3": {
	    "AMIID": "ami-00077e3fed5089981"
	  },
      "sa-east-1": {
	    "AMIID": "ami-003449ffb2605a74c"
	  },
      "us-east-1": {
	    "AMIID": "ami-0323c3dd2da7fb37d"
	  },
      "us-east-2": {
	    "AMIID": "ami-0f7919c33c90f5b58"
	  },
      "us-west-1": {
	    "AMIID": "ami-06fcc1f0bc2c8943f"
	  },
      "us-west-2": {
	    "AMIID": "ami-0d6621c01e8c2de2c"
	  }
    }
  },
  "Conditions": {
    "DetectAMI": {
      "Fn::Equals": [
        {
          "Ref": "AMI"
        },
        "autodetect"
      ]
    }
  },  
  "Resources": {
    "WebappSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "WebApp security group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "TrustedNetworkCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "TrustedNetworkCIDR"
            }
          }
        ]
      }
    },
    "S3Bucket1": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
                }
            },
    "S3BucketPolicy1": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "Put",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "s3:GetObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "S3Bucket1"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "S3Bucket1"
                }
            }
        },
        "S3Bucket2": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
              "AccessControl": "Private"
              }
          },
        "S3BucketPolicy2": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
              "PolicyDocument": {
                  "Id": "MyPolicy",
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Sid": "Put",
                          "Effect": "Allow",
                          "Principal": "*",
                          "Action": "s3:GetObject",
                          "Resource": {
                              "Fn::Join": [
                                  "",
                                  [
                                      "arn:aws:s3:::",
                                      {
                                          "Ref": "S3Bucket2"
                                      },
                                      "/*"
                                  ]
                              ]
                          }
                      }
                  ]
              },
              "Bucket": {
                  "Ref": "S3Bucket2"
              }
            }
          },
         "bthlambdauser" : {
          "Type" : "AWS::IAM::User",
          "Properties" : {
            "LoginProfile": {
              "Password": "AZkt5j8HbnM9zaybv8L9"
            }
          }
        },
        "bthlambdauserKeys" : {
          "Type" : "AWS::IAM::AccessKey",
          "Properties" : {
            "UserName" : { "Ref": "bthlambdauser" }
          }
        },
        "bthec2role" : {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName" : "bthec2role", 
            "AssumeRolePolicyDocument": {
                "Statement": [{
                   "Effect": "Allow",
                   "Principal": {
                      "Service": ["ec2.amazonaws.com"]
                   },
                   "Action": ["sts:AssumeRole"]
                }]
             },
             "Path": "/"
          }
       },
      "bthlambdauserpolicyv1" : {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
            "ManagedPolicyName" : "bthlambdauserpolicy",
            "Path" : "/",
            "PolicyDocument" : 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect"   : "Allow",
                "Action"   : [
                      "iam:Get*",
                      "iam:List*",
                      "iam:SetDefaultPolicyVersion"
                  ],
                "Resource" : "*"
              }]
            },
            "Users" : [{ "Ref" : "bthlambdauser" }]
          }
      },
      "bthec2rolepolicyv1" : {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
            "ManagedPolicyName" : "bthec2rolepolicy",
            "Path" : "/",
            "PolicyDocument" : 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect"   : "Allow",
                "Action"   : [
                  "lambda:InvokeFunction",
                  "lambda:GetAccountSettings",
                  "lambda:ListFunctions",
                  "lambda:ListTags",
                  "lambda:GetEventSourceMapping",
                  "lambda:ListEventSourceMappings",
                  "iam:ListRoles"
              ],
            "Resource" : "*"
          }]
            },
            "Roles": [{ "Ref": "bthec2role" }]
          }
        },
          "bthec2profile": {
          "Type": "AWS::IAM::InstanceProfile",
          "Properties": {
             "Path": "/",
             "Roles": [{ "Ref": "bthec2role" }]
          }
       },
    "bthlambdafunction": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
          "Handler" : "index.handler",
          "Role" : { "Fn::GetAtt" : ["bthlambdaexecrole", "Arn"] },
          "Code" : {
              "ZipFile" : { "Fn::Join" : [ "\n", [
                  "var response = require('cfn-response');",
                  "exports.handler = function(event, context) {",
                  "    console.log('Received event:');",
                  "    console.log(JSON.stringify(event));",
                  "    var base = event.ResourceProperties.Base;",
                  "    var customId = event.ResourceProperties.Id;",
                  "    var outputData = {};",
                  "    try {",
                  "       if(event.RequestType != 'Delete')",
                  "           outputData.Result = base*5;",
                  "       if(event.RequestType == 'Delete' || outputData.Result == parseInt(outputData.Result, 10))",
                  "           response.send(event, context, response.SUCCESS, outputData, customId);",
                  "       else",
                  "           response.send(event, context, response.FAILED, {}, customId);",
                  "    } catch (e) {",
                  "       console.error(e);",
                  "       response.send(event, context, response.FAILED, { 'error': e }, customId);",
                  "       return",
                  "    }",
                  "}"
              ]]}
          },
          "Timeout" : "10",
          "MemorySize" : "256",
          "Runtime" : "nodejs12.x",
          "Environment" : {
              "Variables" : {
                  "EC2_ACCESS_KEY_ID" : { "Ref" : "bthlambdauserKeys" },
                  "EC2_SECRET_KEY_ID" : { "Fn::GetAtt" : ["bthlambdauserKeys", "SecretAccessKey"]}
              }
            }
      }
  },
  "bthlambdaexecrole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [
                            "lambda.amazonaws.com"
                        ]
                    },
                    "Action": [
                        "sts:AssumeRole"
                    ]
                }
            ]
        },
        "Path": "/",
        "Policies": [
            {
                "PolicyName": "cwlogs",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": { "Fn::Join" : [":", ["arn:aws:logs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "*" ]] }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                { "Fn::Join" : [":", ["arn:aws:logs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "log-group", "/aws/lambda/*", "*" ]] }
                            ]
                        }
                    ]
                }
            }
        ]
    }
},
      "bthwebapp1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::If": [
            "DetectAMI",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
				"AMIID"
			  ]
            },
            {
              "Ref": "AMI"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "bthwebapp1"
          },
          {
            "Key": "env",
            "Value": "prod"
          },
          {
            "Key": "Type",
            "Value": "web_app"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "8"
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "True",
            "DeleteOnTermination": "True",
            "SubnetId": {
              "Ref": "PrivateSubnetId"
            },
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "WebappSG"
              }
            ]
          }
        ]
      }
    },
    "bthwebapp2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::If": [
            "DetectAMI",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
				"AMIID"
			  ]
            },
            {
              "Ref": "AMI"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceSize"
        },
        "UserData": {
         "Fn::Base64": { "Fn::Join": [ "", [
                "#!/bin/bash -v\n",
                "yum install git --assumeyes \n",
                "git clone https://github.com/sethsec/Nodejs-SSRF-App.git \n",
                "cd Nodejs-SSRF-App/ \n",
                "yum install -y gcc-c++ make \n",
                "curl -sL https://rpm.nodesource.com/setup_12.x | sudo -E bash - \n",
                "yum install -y nodejs \n",
                "npm install http express needle command-line-args \n",
                "node ssrf-demo-app.js \n",
                "}\n"
              ]
            ]
          }
        },
    "AvailabilityZone": {
      "Ref": "SubnetAZa"
    },
    "DisableApiTermination": "false",
     "IamInstanceProfile": {
     "Ref": "bthec2profile"
     },
    "Tags": [
      {
        "Key": "Name",
        "Value": "bthwebapp2"
      },
      {
        "Key": "env",
        "Value": "prod"
      },
      {
        "Key": "Type",
        "Value": "web_app"
      }
    ],
    "BlockDeviceMappings": [
      {
        "DeviceName": "/dev/xvda",
        "Ebs": {
          "VolumeSize": "8"
        }
      }
    ],
    "NetworkInterfaces": [
      {
        "AssociatePublicIpAddress": "True",
        "DeleteOnTermination": "True",
        "SubnetId": {
          "Ref": "PrivateSubnetId"
        },
        "DeviceIndex": "0",
        "GroupSet": [
          {
            "Ref": "WebappSG"
          }
        ]
      }
    ]
   }
  }
 },
  "Outputs": {
    "PublicIP": {
      "Description": "Remote access IP of the bthwebapp2 machine.",
      "Value": {
        "Fn::GetAtt": [
          "bthwebapp2",
          "PublicIp"
        ]
      }
    }
  } 
 }


